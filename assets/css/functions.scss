// modify from bulma v0.9.4 and https://github.com/sass/sass/issues/684
// because using dart sass with hugo introduces extra dependency

@function pow($number, $exp) {
  $value: 1;
  @if $exp > 0 {
    @for $i from 1 through $exp {
      $value: $value * $number;
    }
  } @else if $exp < 0 {
    @for $i from 1 through -$exp {
      $value: $value / $number;
    }
  }
  @return $value;
}

@function nth-root-newton($A, $guess, $n) {
  @return (1 / $n) * (($n - 1) * $guess + ($A/pow($guess, $n - 1)));
}

@function nth-root($number, $n, $precision: 5) {
  $guess: 2.7;
  $previous-guess: 0;

  // While precision has not been met, keep guessing
  @while round($previous-guess * pow(10, $precision)) != round($guess * pow(10, $precision)) {
    $previous-guess: $guess;
    $guess: nth-root-newton($number, $guess, $n);
  }

  @return $guess;
}

@function pow2dot4($number) {
  // pow(x, 2.4) = pow(x, 2) * pow(pow(x, 1/5), 2)
  @return pow($number, 2) * pow(nth-root($number, 5), 2) 
}

@function luminance($color) {

  @if type-of($color) != 'color' {
    @return 0.55;
  }
  $color-rgb: ('red': red($color),'green': green($color),'blue': blue($color));
  @each $name, $value in $color-rgb {
    $adjusted: 0;
    $value: $value / 255;
    @if $value < 0.03928 {
      $value: $value / 12.92;
    } @else {
      $value: ($value + .055) / 1.055;
      $value: pow2dot4($value);
    }
    $color-rgb: map-merge($color-rgb, ($name: $value));
  }
  @return (map-get($color-rgb, 'red') * .2126) + (map-get($color-rgb, 'green') * .7152) + (map-get($color-rgb, 'blue') * .0722);
}

